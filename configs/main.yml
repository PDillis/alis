env:
  python_bin: "python" # Path to the python bin
  base_project_dir: ${hydra:runtime.cwd}
  before_train_commands: []
  torch_extensions_dir: "~/.cache/torch_extensions"
  data_dir: "data"
  objects_to_copy:
    - ${env.base_project_dir}/configs
    - ${env.base_project_dir}/dnnlib
    - ${env.base_project_dir}/infra
    - ${env.base_project_dir}/metrics
    - ${env.base_project_dir}/scripts
    - ${env.base_project_dir}/tests
    - ${env.base_project_dir}/torch_utils
    - ${env.base_project_dir}/training
    - ${env.base_project_dir}/environment.yml
    - ${env.base_project_dir}/setup.py
  # A list of objects that are static and too big
  # to be copy-pasted for each experiment
  symlinks_to_create:
    - ${env.base_project_dir}/data
num_gpus: 4
print_only: false

project_release_dir:
  _target_: infra.utils.get_experiment_path
  master_dir: ${env.base_project_dir}/experiments
  experiment_name: ${experiment_name}

train_args:
  # All the configs found in scripts/train.py, line 464 onwards
  outdir: ${project_release_dir}
  data: ${env.data_dir}/${dataset}.zip
  gpus: ${num_gpus}
  cfg: auto        # Choose between [auto | stylegan2 | paper256 | paper512 | paper1024 | cifar | 24gb-2gpu | 24gb-4gpu]
  g_fmaps: 0.5     # Multiplier for the channel_base for G
  d_fmaps: 0.5     # Multiplier for the channel_base for D
  snap: 100        # Save the .pkl file every `snap` ticks
  img_snap: 5      # Save a random image snapshot every `img_snap` ticks
  snap_res: 8k     # Resolution of the snapshot; choose from [1080p | 4k | 8k]
  seed: 0          # Random seed to use
  resume: None     # Resume from a previous run (path to network.pkl, or use 'lhq1024' to transfer learn from LHQ)
  kimg: 5000       # How many kimg to train the model for (I doubt many will train above 5000, unless it's from scratch)

  # Let's by default have only x flips
  # TODO: add y flips, should be easy enough (famous last words)
  aug: noaug       # Choose between [noaug | ada]
  target: 0.2      # Only for aug type ada
  augpipe: bgc     # Only for aug type ada
  mirror: 1        # Horizontal mirroring (along y axis)
  z_dim: 512       # Latent dimension of Z space
  w_dim: 512       # Latent dimension of W space

  # By default, use ALIS config
  hydra_cfg_name: "alis.yml"

train_args_str:
  _target_: infra.utils.cfg_to_args_str
  cfg: ${train_args}
